package com.zergatul.scripting;

public enum NodeType {
    // lexemes
    LINE_BREAK,
    WHITESPACE,
    SINGLE_LINE_COMMENT,
    MULTI_LINE_COMMENT,
    COMMENT,

    LEFT_PARENTHESES,
    RIGHT_PARENTHESES,
    LEFT_SQUARE_BRACKET,
    RIGHT_SQUARE_BRACKET,
    LEFT_CURLY_BRACKET,
    RIGHT_CURLY_BRACKET,
    DOT,
    DOLLAR,
    COMMA,
    COLON,
    SEMICOLON,
    EXCLAMATION,
    AMPERSAND,
    PIPE,
    PLUS,
    PLUS_PLUS,
    MINUS,
    MINUS_MINUS,
    ASTERISK,
    SLASH,
    PERCENT,
    LESS,
    GREATER,
    IDENTIFIER,
    FALSE,
    TRUE,
    INTEGER_LITERAL,
    INTEGER64_LITERAL,
    FLOAT_LITERAL,
    STRING_LITERAL,
    CHAR_LITERAL,
    INVALID_NUMBER,
    END_OF_FILE,
    EQUAL,
    QUESTION,
    BOOLEAN,
    INT8,
    INT16,
    INT,
    INT32,
    INT64,
    LONG,
    FLOAT32,
    FLOAT,
    FLOAT64,
    STRING,
    CHAR,
    NEW,
    EQUAL_EQUAL,
    EQUAL_GREATER,
    EXCLAMATION_EQUAL,
    AMPERSAND_AMPERSAND,
    AMPERSAND_EQUAL,
    PIPE_PIPE,
    PIPE_EQUAL,
    LESS_EQUAL,
    GREATER_EQUAL,
    PLUS_EQUAL,
    MINUS_EQUAL,
    ASTERISK_EQUAL,
    SLASH_EQUAL,
    PERCENT_EQUAL,
    IF,
    ELSE,
    RETURN,
    INVALID,
    FOR,
    FOREACH,
    WHILE,
    BREAK,
    CONTINUE,
    IN,
    STATIC,
    VOID,
    REF,
    ASYNC,
    AWAIT,
    LET,
    IS,
    AS,
    META_UNKNOWN,
    META_TYPE,
    META_TYPE_OF,
    CLASS,
    CONSTRUCTOR,
    THIS,

    // trees
    ARGUMENTS_LIST,
    ARRAY_TYPE,
    ASSIGNMENT_OPERATOR,
    ASSIGNMENT_STATEMENT,
    AUGMENTED_ASSIGNMENT_STATEMENT,
    PARENTHESIZED_EXPRESSION,
    BINARY_EXPRESSION,
    BINARY_OPERATOR,
    BLOCK_STATEMENT,
    BOOLEAN_LITERAL,
    COMPILATION_UNIT,
    COMPILATION_UNIT_MEMBERS,
    STATIC_VARIABLE,
    STATEMENTS_LIST,
    CONDITIONAL_EXPRESSION,
    EMPTY_STATEMENT,
    EXPRESSION_STATEMENT,
    IMPLICIT_CAST,
    INDEX_EXPRESSION,
    INVALID_EXPRESSION,
    INVALID_STATEMENT,
    INVOCATION_EXPRESSION,
    METHOD_INVOCATION_EXPRESSION,
    MEMBER_ACCESS_EXPRESSION,
    PROPERTY_ACCESS_EXPRESSION,
    PROPERTY,
    METHOD,
    NAME_EXPRESSION,
    PREDEFINED_TYPE,
    CUSTOM_TYPE,
    LET_TYPE,
    REF_TYPE,
    INVALID_TYPE,
    UNARY_EXPRESSION,
    UNARY_OPERATOR,
    VARIABLE_DECLARATION,
    IF_STATEMENT,
    RETURN_STATEMENT,
    FOR_LOOP_STATEMENT,
    FOREACH_LOOP_STATEMENT,
    WHILE_LOOP_STATEMENT,
    BREAK_STATEMENT,
    CONTINUE_STATEMENT,
    INCREMENT_STATEMENT,
    DECREMENT_STATEMENT,
    ARRAY_CREATION_EXPRESSION,
    ARRAY_INITIALIZER_EXPRESSION,
    OBJECT_CREATION_EXPRESSION,
    UNCONVERTED_LAMBDA,
    LAMBDA_EXPRESSION,
    FUNCTION,
    VOID_TYPE,
    PARAMETER,
    PARAMETER_LIST,
    FUNCTION_INVOCATION,
    STATIC_REFERENCE,
    REF_ARGUMENT_EXPRESSION,
    AWAIT_EXPRESSION,
    SET_GENERATOR_BOUNDARY,
    SET_GENERATOR_STATE,
    GENERATOR_GET_VALUE,
    GENERATOR_RETURN,
    GENERATOR_CONTINUE,
    STACK_LOAD,
    FUNCTION_AS_LAMBDA,
    COLLECTION_EXPRESSION,
    EMPTY_COLLECTION_EXPRESSION,
    TYPE_TEST_EXPRESSION,
    TYPE_CAST_EXPRESSION,
    META_INVALID_EXPRESSION,
    META_TYPE_EXPRESSION,
    META_TYPE_OF_EXPRESSION,
    JAVA_TYPE,
    JAVA_TYPE_NAME,
    CLASS_DECLARATION,
    CLASS_FIELD,
    CLASS_CONSTRUCTOR,
    CLASS_METHOD,
    THIS_EXPRESSION,
    MODIFIERS,
    FUNCTION_TYPE,
    METHOD_GROUP,
    FUNCTION_REFERENCE,
    CONVERSION,
    OBJECT_INVOCATION,
    UNRESOLVED_METHOD
}